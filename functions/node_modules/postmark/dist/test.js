"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var postmark = require("./index");
var accountClient = new postmark.AccountClient("4c84e5d3-8ef0-456f-90b8-3dcd7cca8eba");
var client = new postmark.ServerClient("4a7e4969-8d36-4106-aa16-0a14150c2b63");
client.getBounces().then(function (result) {
    console.log(result.Bounces.length);
});
/*


// SENDING

client.sendEmail(
    {
        From: "igor@wildbit.com",
        To: "ibalosh.testing@gmail.com",
        Subject: "test email",
        HtmlBody: "test",
        Metadata: {"test": "1", "test2": "1"}
    }
).then(response => {
    console.log("Sending message");
    console.log(response.To);
    console.log(response.SubmittedAt);
    console.log(response.Message);
    console.log(response.MessageID);
    console.log(response.ErrorCode)
});

let message: Models.Message = new Models.Message("igor@wildbit.com", "test2", "test","test", "igor@wildbit.com")
console.log(message);

client.sendEmail(message).then(result => {
    console.log(result);
}).catch(error => {
    console.log(error);
});

client.sendEmailBatch(
    [{
        From: "igor@wildbit.com",
        To: "ibalosh.testing@gmail.com",
        Subject: "test email",
        HtmlBody: "test",
        Metadata: {"test": "1", "test2": "1"}
    },
        {
            From: "igor@wildbit.com",
            To: "ibalosh.testing@gmail.com",
            Subject: "test email2",
            HtmlBody: "test",
            Metadata: {"test": "1", "test2": "1"}
        }]
).then(response => {
    console.log("Sending message");
    console.log(response[0].To);
    console.log(response[0].SubmittedAt);
    console.log(response[0].Message);
});


// BOUNCES

client.getBounces({type: BounceType.HardBounce}, (err, data) => {
    if (data) {
        console.log(data.TotalCount);
    }
    else if (err) {
        console.error(err.name);
    }

}).then(result => {
    console.log(result.TotalCount);
    console.log(result.Bounces[0].Subject);

}, error => {
    //console.error(error.message);
    //console.error(errors.message);
    //console.error(error.stack);
});


client.getDeliveryStatistics().then(result => {
    console.log("Get Delivery Statistics");
    console.log(result.Bounces[0].Name);
});

client.getBounces({count:1, offset:0}).then(result => {
    console.log("Get Bounces");
    console.log(result.Bounces[0].RecordType);
    console.log(result.Bounces[0].ID);
    console.log(result.Bounces.length);
});

client.getBounce(1).then(result => {
    console.log(result);
}).catch(error => {
    console.log(<Error>error.name)
});

client.getBounce(1328046823).then(result => {
    console.log("Get Bounces by ID");
    console.log(result.BouncedAt);
});

client.getBounceDump(1328046823).then(result => {
    console.log("Get Bounces Dump");
    console.log(result.Body);
});

client.activateBounce(1328046823).then(result => {
    console.log("Activate Bounce");
    console.log(result.Message);
    console.log(result.Bounce.ID)
});

client.getBounceTags().then(result => {
    console.log("Bounce Tags");
    console.log(result.pop());
});

client.getBounces({type: Models.BounceType.HardBounce, count:1, hey: 1}, (err, data) => {
        if (data) {
            console.log(data.TotalCount);
        }
        else if (err) {
            //console.log(err.stack);
            //console.error(err);
        }
    }
).then((result:Models.Bounces) => {
    console.log(result.TotalCount);
}).catch((error:PostmarkError.StandardError) => {
    console.log(error instanceof PostmarkError.StandardError)
    console.error(error.name);
});


client.getBounces().then((result) => {console.log(result.TotalCount)})

// SERVER

client.getServer().then(result => {
    console.log("Server");
    console.log(result.ApiTokens);
});

client.editServer({Color:"blues"}).then(result => {
    console.log("Server edit");
    console.log(result.Color);
});

// OUTBOUND MESSAGES

client.getOutboundMessages({count:1}).then(result => {
    console.log(result.TotalCount);
    console.log(result.Messages);
    console.log(result.Messages[0].To);
    console.log(result.Messages[0].Metadata.test);
    console.log(result.Messages[0].MessageID);
});

client.getOutboundMessages({fromEmail:"igor@wildbit.com", count:1, hey: "test", status: MessageStatus.Processed, subject: "test"}).then(result => {
    console.log(result);
});

client.getOutboundMessageDetails("64812d80-427b-47fa-ba43-f27c6537025b").then(result => {
    console.log(result.Body);
    console.log(result.Metadata.test);
    console.log(result.MessageEvents.length);
    let deliveryEvent = <OutboundMessageEvents.DeliveryEvent>result.MessageEvents[0];
    console.log(deliveryEvent.Details.DeliveryMessage);
});

client.getOutboundMessageDump("64812d80-427b-47fa-ba43-f27c6537025b").then(result => {
    console.log(result.Body);
});


//OUTBOUND MESSAGES - OPENS

client.getMessageOpens({count:1}).then(result => {
   console.log(result);
});

client.getMessageOpens({platform: "Desktop", os_company: "Apple Computer"}).then(result => {
    console.log(result.Opens[0]);
});

client.getMessageOpenDetails("6fc96f0c-0eae-4fb6-a59b-759b401a2397").then(result => {
    console.log(result);
    console.log(result.Opens[0].Client.Name);
    console.log(result.Opens[0].Geo.IP);
    console.log(result.Opens[0].RecordType)
});

// INBOUND MESSAGES

client.getInboundMessages({count: 1}).then(result => {
    console.log(result);
    console.log(result.InboundMessages[0].FromFull.Email);
});

client.getInboundMessages({mailboxHash: "igorhash", status: InboundMessageStatus.Processed}).then(result => {
    console.log(result.TotalCount);
    console.log(result.InboundMessages[0]);
});


client.getInboundMessageDetails("042e5fb5-291a-4d9d-ac1f-62a9fe66daf8").then(result => {
    console.log(result.HtmlBody);
    console.log(result);
});

client.bypassBlockedInboundMessage("042e5fb5-291a-4d9d-ac1f-62a9fe66daf8").then(result => {
    console.log(result.Message);
});

client.retryInboundHookForMessage("042e5fb5-291a-4d9d-ac1f-62a9fe66daf8").then(result => {
    console.log(result.Message);
});

// OUTBOUND MESSAGE CLICKS

client.getMessageClicks().then(result => {
    console.log(result.Clicks[0].ClickLocation);
    console.log(result.Clicks[0].OS.Company);
    console.log(result.Clicks[0].MessageID);
});

client.getMessageClicksForSingleMessage("1031ceb7-3f3d-4647-b054-457ec4f7ae1c").then(result => {
    console.log(result.Clicks[0].ClickLocation);
    console.log(result.Clicks[0].OS.Company);
    console.log(result.Clicks[0].MessageID);
});


client.getMessageOpensForSingleMessage('3dfcc7d8-409c-4950-b60e-9b4046720c73', {os_company: "Apple", platform: "Desktop"}).then(result => {
    console.log(result);
});

client.getMessageClicksForSingleMessage('3dfcc7d8-409c-4950-b60e-9b4046720c73').then(result => {
    console.log(result);
});

// STATS

client.getOutboundOverview({tag: "test"}).then(result => {
    console.log(result);
});

client.getSentCounts({fromDate: "2018-05-28"}).then(result => {
    console.log(result);
});

client.getOuboundOverview().then(result => {
    console.log(result.Sent);
    console.log(result.BounceRate);
});

client.getSentCounts().then(result => {
   console.log(result.Days[0].Sent);
   console.log(result.Days[0].Date);
});

client.getBounceCounts().then(result => {
    console.log(result.HardBounce);
    console.log(result.Days);
    console.log(result.Days[0].HardBounce);
});

client.getSpamComplaintsCounts().then(result => {
    console.log(result);
});

client.getTrackedEmailCounts().then(result => {
    console.log(result.Days[0].Date);
    console.log(result.Days[0].Tracked);
    console.log(result.Tracked);
});

client.getEmailOpenCounts().then(result => {
    console.log(result.Days[0].Opens);
    console.log(result.Days[0].Unique);
    console.log(result.Days[0].Date);
    console.log(result.Opens);
});

client.getEmailPlatformUsage().then(result => {
    console.log(result.Days[0].Unknown);
});


client.getEmailClientUsage().then(result => {
    console.log(result.Days[0].Date);
    console.log(result.Days[0].Gmail);
    console.log(result.Gmail);
});

client.getEmailReadTimes().then(result => {
    console.log(result.Days[0].Date);
    console.log(result.Days[0]);
});

client.getClickCounts().then(result => {
    console.log(result.Clicks);
    console.log(result.Days[0].Unique);
});

client.getClickBrowserUsage().then(result => {
    console.log(result.Days[0].Chrome);
    console.log(result.Chrome);
});

client.getClickPlatformUsage().then(result => {
    console.log(result.Days[0].Unknown);
    console.log(result.Unknown);
});

client.getClickLocation().then(result => {
    console.log(result.Days[0].HTML);
    console.log(result.Text);
});

// TAG TRIGGERS

client.createTagTrigger({TrackOpens: true, MatchName: "igor4"}).then(result => {
    console.log(result.MatchName);
    console.log(result.TrackOpens);
    console.log(result.ID);
});

client.getTagTriggers().then(result => {
    console.log(result.TotalCount);
    console.log(result.Tags[0].TrackOpens);
    console.log(result.Tags[0].MatchName);
    console.log(result.Tags[0].ID);
});

client.getTagTriggers({match_name: "welcome1"}).then(result => {
    console.log(result);
});

client.editTagTrigger(2345212, {MatchName:"igorup"}).then(result => {
    console.log(result.MatchName);
});


client.getTagTrigger(2345212).then(result => {
    console.log(result.MatchName);
});

client.deleteTagTrigger(2345212).then(result => {
   console.log(result.Message);
    console.log(result.ErrorCode);
});

client.getInboundRuleTriggers().then(result => {
    console.log(result.TotalCount);
    console.log(result.InboundRules[0].Rule);
    console.log(result.InboundRules[0].ID);
});


client.createInboundRuleTrigger({Rule: "hejshhe.com"}).then(result => {
    console.log(result.Rule);
    console.log(result.ID);
});

client.deleteInboundRuleTrigger(1544125).then(result => {
    console.log(result.Message);
    console.log(result.ErrorCode);
});

// TEMPLATES

client.deleteTemplate("igor1").then(result => {
    console.log(result.Message);
});

client.createTemplate({Name: "igor", Alias: "igor4", HtmlBody: "test", Subject: "Test", TextBody: "tesst"}).then(result => {
    console.log(result.Active);
});

client.createTemplate({Name: "igor1", HtmlBody: "test", Subject: "test"});

client.getTemplates().then(result => {
    console.log(result);
    console.log(result.Templates[0].Alias);
    console.log(result.Templates[0].Name);
    console.log(result.Templates[0].TemplateId);
    console.log(result.Templates[0].Active);
});

client.getTemplate("igor").then(result => {
    console.log(result.Active);
    console.log(result.AssociatedServerId);
    console.log(result.TemplateId);
    console.log(result.Subject);
    console.log(result.Alias);
});

client.editTemplate("igor", {Name: "igorica2"}).then(result => {
    console.log(result.Name);
});

client.validateTemplate({
    Subject: "{{#company}}{{name}}{{/company}} {{subjectHeadline}}",
    HtmlBody: "{{#company}}{{address}}{{/company}}{{#each person}} {{name}} {{/each}}",
    TextBody: "{{#company}}{{phone}}{{/company}}{{#each person}} {{name}} {{/each}}",
}).then(result => {
    console.log(result)
    console.log(result.AllContentIsValid);
    console.log(result.HtmlBody.ContentIsValid);
    console.log(result.TextBody.ContentIsValid);
    console.log(result.Subject.ContentIsValid);
    console.log(result.Subject.ValidationErrors);
    console.log(result.Subject.RenderedContent);
    console.log(result.SuggestedTemplateDataTypes.company);

});

let templateValidation: Models.TemplateValidationOptions = new Models.TemplateValidationOptions("{{#company}}{{name}}{{/company}} {{subjectHeadline}}",
    "{{#company}}{{address}}{{/company}}{{#each person}} {{name}} {{/each}}");

client.validateTemplate(templateValidation).then(result => {
    console.log(result)
    console.log(result.AllContentIsValid);
    console.log(result.HtmlBody.ContentIsValid);
    console.log(result.Subject.ContentIsValid);
    console.log(result.Subject.ValidationErrors);
    console.log(result.Subject.RenderedContent);

});

client.sendEmailWithTemplate({
    TemplateId:7981100,
    From: "igor@wildbit.com",
    To: "ibalosh.testing@gmail.com",
    TemplateModel: {company: "igor"}
});

client.sendEmailBatchWithTemplates([
    {
        TemplateId:7981100,
        From: "igor@wildbit.com",
        To: "ibalosh.testing@gmail.com",
        TemplateModel: {company: "igor"}
    },
    {
        TemplateId:7981100,
        From: "igor@wildbit.com",
        To: "ibalosh.testing@gmail.com",
        TemplateModel: {company: "igor"}
    }
]);


*/
// DOMAINS
/*

// SERVER

accountClient.getServer(4175023).then(result => {
    console.log("Get Single server");
    console.log(result.ID);
    console.log(result.Name);
});

accountClient.editServer(4175023, {Name: "Igor2"}).then(result => {
    console.log("Get Single server");
    console.log(result.ID);
    console.log(result.Name);
});

accountClient.getServers().then( result => {
    console.log("List servers");
    console.log(result.Servers.length);
});

accountClient.createServer({Name: "Igor1"}).then(result => {
    console.log("Create server")
    console.log(result);
});

accountClient.deleteServer(4175023).then(result => {
    console.log("Delete server");
    console.log(result.Message);
    console.log(result.ErrorCode);
});

let server: Models.ServerToCreate = new Models.ServerToCreate("TestServer");

accountClient.createServer(server).then(result => {
    console.log(result);
});

// DOMAINS

let test = {count:1, test: 'hey'};
accountClient.getDomains(test).then(result => {
    console.log(result);
});


accountClient.getDomains().then(result => {
    console.log(result);
});

//accountClient.getDomainDetails(1173794).then( result => {
//    console.log(result);
//});


// SENDER SIGNATUERS

accountClient.getSenderSignatures().then(result => {
    console.log(result.TotalCount);
    console.log(result.SenderSignatures);
    console.log(result.SenderSignatures[0].Domain);
});

accountClient.getSenderSignature(86790).then(result => {
    console.log(result);
    console.log(result.Confirmed);
    console.log(result.Domain);
});

accountClient.createSenderSignature({Name: "Ivan Mitrov", FromEmail: "igor+test@wildbit.com"}).then(result => {
    console.log(result);
});

let signature:Models.SignatureToCreate = new Models.SignatureToCreate("Ivan Mitrov", "igor+test1@wildbit.com");

accountClient.createSenderSignature(signature).then(result => {
    console.log(result);
});

accountClient.editSenderSignature(1569199, { Name: "Ivan Ivanov"}).then(result => {
    console.log(result);
});

accountClient.deleteSenderSignature(1569199).then(result => {
    console.log(result.Message);
});

accountClient.resendSenderSignatureConfirmation(1569217).then(result => {
    console.log(result.Message);
});

accountClient.verifySenderSignatureSPF(86790).then(result => {
    console.log(result.Confirmed);
});


accountClient.requestNewDKIMForSenderSignature(1569250).then(result => {
    console.log(result);
});

// ERRORS

client.getBounces({type: BounceType.HardBounce}, (err, data) => {
    if (data) {
        console.log(data.TotalCount);
    }
    else if (err) {
        console.error(err.name);
    }

}).then(result => {
    console.log(result.TotalCount);
    console.log(result.Bounces[0].Subject);

}, error => {
    //console.error(error.message);
    //console.error(errors.message);
    //console.error(error.stack);
});


client.sendEmail(
    {
        From: "",
        To: "ibalosh.testing@gmail.com",
        Subject: "test email",
        HtmlBody: "test",
        Metadata: {"test": "1", "test2": "1"}
    }).catch(error => {
    //console.error(error.message);
    //console.error(error.code);
    //console.error(error.stack);
    //console.error(error);
});


*/ 
//# sourceMappingURL=test.js.map